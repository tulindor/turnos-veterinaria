{"version":3,"sources":["components/Header.js","components/Nuevacita.js","components/Cita.js","components/Listacitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","titulo","react_default","a","createElement","className","stateInicial","cita","mascota","propietario","fecha","hora","sintomas","error","Nuevacita","state","handleChange","e","console","log","target","name","value","_this","setState","Object","objectSpread","defineProperty","handleSubmit","preventDefault","_this$state$cita","nuevaCita","id","uuid","props","crearNuevaCita","this","onSubmit","type","placeholder","onChange","Component","Citas","eliminarCita","onClick","ListaCitas","citas","mensajes","keys","length","map","Cita","key","App","datos","concat","toConsumableArray","filter","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","components_Header","components_Nuevacita","Listacitas","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe732a90.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({titulo}) => (\r\n    <header>\r\n        <h3 className=\"text-center mb-5\">{titulo}</h3>\r\n    </header>\r\n);\r\n\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport uuid from 'uuid';\r\n\r\n\r\n//creo un estado inicial del state\r\nconst stateInicial = {\r\n    cita: {\r\n        mascota: '',\r\n        propietario:'',\r\n        fecha: '',\r\n        hora:'',\r\n        sintomas:''\r\n    },\r\n    error:false\r\n}\r\n\r\nclass Nuevacita extends Component{\r\n    state = {...stateInicial}\r\n\r\n    //cuando se agrega data a los inputs\r\n\r\n    handleChange = (e) => {\r\n        console.log(e.target.name + ': ' + e.target.value);\r\n\r\n        //colocarlo en el state\r\n\r\n        this.setState({\r\n            cita : {\r\n                ...this.state.cita, //hace una copia del state para traer tods los datos\r\n                [e.target.name] : e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    //cuando hace el submit\r\n\r\n    handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        //extraer los valores del state\r\n        const{mascota,propietario,fecha,hora,sintomas} = this.state.cita;\r\n\r\n        //validar que todos estén llenos\r\n        if(mascota === '' || propietario === '' || fecha === '' || hora === '' || sintomas === ''){\r\n            this.setState({\r\n                error:true\r\n            });\r\n\r\n            //detener la ejecucion\r\n            return;\r\n        }\r\n\r\n        //genero un objeto con los datos (usando UUID)\r\n        const nuevaCita = {...this.state.cita}\r\n        nuevaCita.id = uuid();\r\n\r\n        //agregar la cita del state a APP\r\n        //esto toma el objeto con los datos del state\r\n        this.props.crearNuevaCita(nuevaCita)\r\n\r\n        //colocar en el state inicial, blanquea el status del form en el submit\r\n        this.setState({\r\n            ...stateInicial\r\n        })\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n        //extraer valor del state\r\n        const {error} = this.state;\r\n\r\n        return(\r\n            <div className=\"p-5 rounded bg-white shadow-sm\">\r\n                <div className=\"bg-light rounded mb-5\">\r\n                    <h5 className=\"text-center p-3\">\r\n                            Llenar el formulario\r\n                    </h5>\r\n                </div>\r\n\r\n                {error ? <div className=\"alert alert-danger bg-danger text-white mb-5 text-center\">\r\n                    Todos los campos son obligatorios\r\n                </div> : null}\r\n\r\n                <form\r\n                    onSubmit={this.handleSubmit}\r\n                >\r\n                    <div className=\"form-group row\">\r\n                        <div className=\"col-lg-6 mb-3\">\r\n                            <label>Nombre de Mascota</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Nombre de Mascota\"\r\n                                name=\"mascota\"\r\n                                onChange={this.handleChange}\r\n                                value={this.state.cita.mascota}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-6 mb-3\">\r\n                            <label>Nombre del Dueño</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Nombre del Dueño\"\r\n                                name=\"propietario\"\r\n                                onChange={this.handleChange}\r\n                                value={this.state.cita.propietario}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-6 mb-3\">\r\n                            <label>Fecha</label>\r\n                            <input\r\n                                type=\"date\"\r\n                                className=\"form-control\"\r\n                                name=\"fecha\"\r\n                                onChange={this.handleChange}\r\n                                value={this.state.cita.fecha}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-6 mb-3\">\r\n                            <label>Horario</label>\r\n                            <input\r\n                                type=\"time\"\r\n                                className=\"form-control\"\r\n                                name=\"hora\"\r\n                                onChange={this.handleChange}\r\n                                value={this.state.cita.hora}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-lg-12 mb-3\">\r\n                            <label>Síntomas</label>\r\n                            <textarea\r\n                                className=\"form-control\"\r\n                                placeholder=\"Descripción de los sintomas\"\r\n                                name=\"sintomas\"\r\n                                onChange={this.handleChange}\r\n                                value={this.state.cita.sintomas}\r\n                            >\r\n                            </textarea>\r\n                        </div>\r\n                        <div className=\"col-12 text-center\">\r\n                            <input \r\n                                type=\"submit\" \r\n                                className=\"btn btn-success btn-lg\"\r\n                                value=\"Agregar Turno\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nuevacita;","import React from 'react';\r\n\r\n\r\nconst Citas = ({cita, eliminarCita}) =>(\r\n    <div className=\"col-lg-6 mb-3\">\r\n        <div className=\"p-5 shadow-sm rounded bg-white\">\r\n            <p className=\"m-0 text-success\"><b>{cita.mascota}</b></p>\r\n            <p className=\"m-0\">Dueño: {cita.propietario}</p>\r\n            <p className=\"m-0\">Día: {cita.fecha} - {cita.hora}hs</p>\r\n            <p>Sintomas:</p>\r\n            <div className=\"rounded p-2 bg-light\">\r\n                <p className=\"m-0\">{cita.sintomas}</p>\r\n            </div>\r\n            <button \r\n                className=\" mt-4 btn btn-danger\"\r\n                //espera a que des click y ejecuta la funcion con el valor\r\n                onClick={() => eliminarCita(cita.id)}\r\n            >Borrar</button>\r\n            \r\n        </div>\r\n\r\n    </div>\r\n\r\n);\r\n\r\nexport default Citas;","import React from 'react';\r\nimport Cita from './Cita';\r\n\r\n\r\nconst ListaCitas = ({citas, eliminarCita}) =>{\r\n\r\n    //imprimir un mensaje en base si hay turnos\r\n    const mensajes = Object.keys(citas).length === 0 ? 'No hay Turnos' :\r\n    'Turnos Agendados:';\r\n\r\n    return(\r\n        <div className=\"row\">\r\n            <div className=\"col-12 my-4\">\r\n                <h4 className=\"text-center m-0\">{mensajes}</h4>\r\n            </div>\r\n            {citas.map(cita => (\r\n              <Cita\r\n                key={cita.id}\r\n                //paso el objeto completo para procesarlo en el componente\r\n                cita={cita}\r\n                eliminarCita={eliminarCita}\r\n              />  \r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListaCitas;","import React, {Component} from 'react';\nimport Header from './components/Header';\nimport Nuevacita from './components/Nuevacita';\nimport ListaCitas from './components/Listacitas';\n\n\nclass App extends Component{\n  state={\n    citas:[]\n  }\n\n  //cuando la aplicacion carga\n  componentDidMount(){\n    //cargamos lo del local storage una vez que este listo el documento\n    const citasLS = localStorage.getItem('citas');\n    if(citasLS){\n        this.setState({\n          //json parse lo convierte en un arreglo de objetos si está bien guardado\n            citas : JSON.parse(citasLS)\n        })\n    }\n\n\n  }\n\n  //cuando eliminamos o agregamos un turno nuevo\n\n  componentDidUpdate(){\n    //local storage solo guarda strings, asì que lo convertimos en un JSON\n    localStorage.setItem('citas', JSON.stringify(this.state.citas))\n    //lo convierte de un arreglo a un string\n  }\n\n  //de esta manera paso datos de un componente hijo a un padre\n  crearNuevaCita = datos =>{\n    //copiar el state actual\n    const citas = [...this.state.citas, datos];\n    //agregar nuevo state\n    this.setState({\n      citas : citas\n    })\n\n  }\n\n\n  //eliminar citas del state\n  eliminarCita = id => {\n    //copiar el state\n    const citasActuales = [...this.state.citas];\n\n    //usar filter para sacar el ID del arreglo\n    const citas = citasActuales.filter(cita => cita.id !== id);\n    //el filter accede a cada uno de los resultados del array y filtra\n\n    //actualizar el state\n    this.setState({\n      citas\n    })\n\n  }\n\n  render(){\n    return(\n      <div className=\"container py-5\">\n          <Header\n              titulo='Administrador Veterinaria'\n          />\n          <Nuevacita\n            crearNuevaCita={this.crearNuevaCita}\n          />\n          <div className=\"p-5 mt-5 bg-white shadow-sm\">\n            <ListaCitas\n                //le paso el state con las citas\n                citas={this.state.citas}\n                eliminarCita={this.eliminarCita}\n            />          \n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}